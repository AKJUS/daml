-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- All rights reserved.

daml 1.2
module Iou_desugar where

-- Test that `Eq`, `Show`, `Template` and so on as used in desugaring
-- are accessible as qualified names from `DA.Internal.Desugar`. When
-- desugaring is implemented this way, this test can be removed (as it
-- will be incidentally tested).

data Iou = Iou with
    issuer   : Party
    owner    : Party
    currency : Text
    amount   : Decimal
  deriving (DA.Internal.Desugar.Eq, DA.Internal.Desugar.Show)

instance DA.Internal.Desugar.Template Iou where
  ensure this@Iou{..} = amount > 0.0

  signatory this@Iou{..} = [issuer]
  observer this@Iou{..} = [owner]

  agreement this@Iou{..} =
    show issuer <> " promises to pay " <>
    show amount <> " " <> currency <>
    " on demand to " <> show owner

data Transfer = Transfer with newOwner : Party
instance DA.Internal.Desugar.Choice Iou Transfer (ContractId Iou) where
  choiceController Iou{..} _ = [owner]
  choice this@Iou{..} self arg@Transfer{..} =
    create this with owner = newOwner

data Split = Split with splitAmount : Decimal
instance DA.Internal.Desugar.Choice Iou Split (ContractId Iou, ContractId Iou) where
  choiceController Iou{..} _ = [owner]
  choice this@Iou{..} self arg@Split{..} = do
      let restAmount = amount - splitAmount
      splitCid <- create this with amount = splitAmount
      restCid <- create this with amount = restAmount
      return (splitCid, restCid)

data Merge = Merge with otherCid : ContractId Iou
instance DA.Internal.Desugar.Choice Iou Merge (ContractId Iou) where
  choiceController Iou{..} _ = [owner]
  choice this@Iou{..} self arg@Merge{..} = do
      otherIou <- fetch otherCid
      assert (
        currency == otherIou.currency &&
        owner == otherIou.owner &&
        issuer == otherIou.issuer
        )
      transferCid <-
        exercise otherCid Transfer with newOwner = issuer
      exercise transferCid Archive
      create this with amount = amount + otherIou.amount
