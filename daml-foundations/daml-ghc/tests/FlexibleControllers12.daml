-- @IGNORE-LF 1.0
-- @IGNORE-LF 1.1
daml 1.2
module DisjunctionChoices12 where

data PaintFenceDetails = PaintFenceDetails{}
    deriving (Eq, Show)

template PaintFence with
    owner : Party
    painter : Party
    details : PaintFenceDetails
  where
    signatory [owner, painter]

template PaintFenceProposal with
    owner : Party
    potentialPainters : [Party]
    details : PaintFenceDetails
  where
    signatory owner
    observer potentialPainters

    -- TODO(MH): Implement syntactic sugar for flexible controllers.
    -- choice Accept : ContractId PaintFence with painter : Party
    --   controller painter can
    --   do
    --     assert $ painter `elem` potentialPainters
    --     create PaintFence with owner, painter, details

data Accept = Accept with painter : Party
    deriving (Eq, Show)

instance Choice PaintFenceProposal Accept (ContractId PaintFence) where
    choiceController _ Accept{..} = [painter]
    choice PaintFenceProposal{..} _ Accept{..} = do
        assert $ painter `elem` potentialPainters
        create PaintFence with owner, painter, details

test = scenario do
    alice <- getParty "Alice"
    bob <- getParty "Bob"
    charlie <- getParty "Charlie"

    let details = PaintFenceDetails
    proposal <- submit alice do
        create PaintFenceProposal with
            owner = alice
            potentialPainters = [bob, charlie]
            details
    submitMustFail bob do
        exercise proposal Accept with painter = charlie
    contract <- submit charlie do
        exercise proposal Accept with painter = charlie
    pure ()
