#!/usr/bin/env bash
set -eu

# Modified from sdk/releases/scripts/preview-release.sh, to:
# * Only work for HEAD
# * Install into the real ~/.da folder

readonly REPO_ROOT=$(bazel info workspace)

# Make sure they are in the right repo
if [[ "${REPO_ROOT}/dev-env/bin/da-sdk-head" != "${BASH_SOURCE}" ]];
then
  echo "Repo root does not match the script being run."
  echo "Make sure you run this script from a directory within the 'da' repository "
  exit 1
fi

if [[ ! -d ~/.da/bin ]]; then
  echo "You do not seem to have the SDK Assistant installed."
  echo "Please visit https://engineering.da-int.net/sdk/summary/releases/latest/doc/packages/sdk-docs-installation/"
  echo "You should have ~/.da/bin/da existing and executable, and ~/.da/bin in your PATH."
  exit 2
fi

echo "$(tput setaf 3)Building version 0.0.0 - this may take a while ...$(tput sgr 0)"
echo ""

function cleanup() {
  echo "SDK 0.0.0 failed to build/install - if you need help ask on #team-daml"
  echo "$(tput setaf 3)FAILED TO INSTALL! $(tput sgr 0)"
}
trap cleanup EXIT

if [[ "${1-}" == "--damlc" ]]; then
  # compile only damlc, and overwrite it directly - assumes da-sdk-head was called relatively recently
  bazel build //daml-foundations/daml-tools/da-hs-damlc-app:da-hs-damlc-app
  readonly DF_BIN="$(bazel info bazel-bin)/daml-foundations/daml-tools/da-hs-damlc-app/da-hs-damlc-app"
  cp $DF_BIN ~/.da/packages/damlc/0.0.0/da-hs-damlc-app
  trap - EXIT
  exit 0
elif [[ "${1-}" != "" ]]; then
  echo "Unknown argument: ${1}"
  trap - EXIT
  exit 1
fi


# Building here separately so the user can see the build process which could take a while
bazel build //sdk/releases/HEAD:head-components-tarball

# Where the components end up
readonly HEAD_COMPONENTS_ARTIFACT="$(bazel info bazel-genfiles)/sdk/releases/HEAD/head-components.tar.gz"

TMP_DIR=".sdk-head"
mkdir -p $TMP_DIR
tar xzf ${HEAD_COMPONENTS_ARTIFACT} -C $TMP_DIR --strip-components 1

for package in ${TMP_DIR}/*; do
  # Copy over the HEAD versions.
  if [ -d "${package}/0.0.0" ]; then
    OUT=${HOME}/.da/packages/$(basename ${package})/0.0.0
    mkdir -p "${OUT}"
    rm -rf "${OUT}"
    cp -R "${package}/0.0.0" "${OUT}"
  fi
done
rm -rf $TMP_DIR

mkdir -p "${HOME}/.da/packages/sdk/0.0.0"

# Some (many) users end up with a real directory as ~/.vscode/extensions/da-vscode-daml-extension
# which causes 'da use' to not work, so we fix it up first. See SDK-5606.
rm -rf ~/.vscode/extensions/da-vscode-daml-extension

# Note that we don't build 'da' itself from HEAD, since if we have a broken HEAD then we don't
# want to trash the global install of 'da'. Instead we: 1) upgrade to the latest release; and
# 2) build da-head.

da upgrade   # upgrade the 'da' binary to the latest release
da use 0.0.0 # and use HEAD as the current version
bazel build //da-assistant:da
cp $(bazel info bazel-bin)/da-assistant/da "${HOME}/.da/bin/da-head"

if ! hash da-head 2>/dev/null; then
  echo "~/.da/bin is not on the \$PATH, you must add it."
  exit 1
fi

trap - EXIT
echo "$(tput setaf 3)Successfully installed DA SDK HEAD as version 0.0.0.$(tput sgr 0)"
