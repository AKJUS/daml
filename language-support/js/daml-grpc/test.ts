// Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

import * as ledger from 'daml-grpc';
import { expect } from 'chai';

describe('daml-grpc', () => {

    it('should include all necessary definitions', () => {
        expect(ledger.testing).to.not.be.undefined;
        expect(ledger.testing.TimeService).to.not.be.undefined;
        expect(ledger.testing.TimeClient).to.not.be.undefined;
        expect(ledger.testing.GetTimeRequest).to.not.be.undefined;
        expect(ledger.testing.GetTimeResponse).to.not.be.undefined;
        expect(ledger.testing.SetTimeRequest).to.not.be.undefined;
        expect(ledger.testing.ResetService).to.not.be.undefined;
        expect(ledger.testing.ResetClient).to.not.be.undefined;
        expect(ledger.testing.ResetRequest).to.not.be.undefined;
        expect(ledger.ActiveContractsService).to.not.be.undefined;
        expect(ledger.ActiveContractsClient).to.not.be.undefined;
        expect(ledger.GetActiveContractsRequest).to.not.be.undefined;
        expect(ledger.GetActiveContractsResponse).to.not.be.undefined;
        expect(ledger.CommandCompletionService).to.not.be.undefined;
        expect(ledger.CommandCompletionClient).to.not.be.undefined;
        expect(ledger.Checkpoint).to.not.be.undefined;
        expect(ledger.CompletionEndRequest).to.not.be.undefined;
        expect(ledger.CompletionEndResponse).to.not.be.undefined;
        expect(ledger.CompletionStreamRequest).to.not.be.undefined;
        expect(ledger.CompletionStreamResponse).to.not.be.undefined;
        expect(ledger.CommandService).to.not.be.undefined;
        expect(ledger.CommandClient).to.not.be.undefined;
        expect(ledger.SubmitAndWaitRequest).to.not.be.undefined;
        expect(ledger.CommandSubmissionService).to.not.be.undefined;
        expect(ledger.CommandSubmissionClient).to.not.be.undefined;
        expect(ledger.SubmitRequest).to.not.be.undefined;
        expect(ledger.Command).to.not.be.undefined;
        expect(ledger.Commands).to.not.be.undefined;
        expect(ledger.CreateCommand).to.not.be.undefined;
        expect(ledger.ExerciseCommand).to.not.be.undefined;
        expect(ledger.Completion).to.not.be.undefined;
        expect(ledger.ArchivedEvent).to.not.be.undefined;
        expect(ledger.CreatedEvent).to.not.be.undefined;
        expect(ledger.Event).to.not.be.undefined;
        expect(ledger.ExercisedEvent).to.not.be.undefined;
        expect(ledger.LedgerConfigurationService).to.not.be.undefined;
        expect(ledger.LedgerConfigurationClient).to.not.be.undefined;
        expect(ledger.GetLedgerConfigurationRequest).to.not.be.undefined;
        expect(ledger.GetLedgerConfigurationResponse).to.not.be.undefined;
        expect(ledger.LedgerConfiguration).to.not.be.undefined;
        expect(ledger.LedgerIdentityService).to.not.be.undefined;
        expect(ledger.LedgerIdentityClient).to.not.be.undefined;
        expect(ledger.GetLedgerIdentityRequest).to.not.be.undefined;
        expect(ledger.GetLedgerIdentityResponse).to.not.be.undefined;
        expect(ledger.LedgerOffset).to.not.be.undefined;
        expect(ledger.PackageService).to.not.be.undefined;
        expect(ledger.PackageClient).to.not.be.undefined;
        expect(ledger.GetPackageRequest).to.not.be.undefined;
        expect(ledger.GetPackageResponse).to.not.be.undefined;
        expect(ledger.GetPackageStatusRequest).to.not.be.undefined;
        expect(ledger.GetPackageStatusResponse).to.not.be.undefined;
        expect(ledger.HashFunction).to.not.be.undefined;
        expect(ledger.ListPackagesRequest).to.not.be.undefined;
        expect(ledger.ListPackagesResponse).to.not.be.undefined;
        expect(ledger.PackageStatus).to.not.be.undefined;
        expect(ledger.TraceContext).to.not.be.undefined;
        expect(ledger.Filters).to.not.be.undefined;
        expect(ledger.InclusiveFilters).to.not.be.undefined;
        expect(ledger.TransactionFilter).to.not.be.undefined;
        expect(ledger.Transaction).to.not.be.undefined;
        expect(ledger.TransactionTree).to.not.be.undefined;
        expect(ledger.TreeEvent).to.not.be.undefined;
        expect(ledger.TransactionService).to.not.be.undefined;
        expect(ledger.TransactionClient).to.not.be.undefined;
        expect(ledger.GetLedgerEndRequest).to.not.be.undefined;
        expect(ledger.GetLedgerEndResponse).to.not.be.undefined;
        expect(ledger.GetTransactionByEventIdRequest).to.not.be.undefined;
        expect(ledger.GetTransactionByIdRequest).to.not.be.undefined;
        expect(ledger.GetTransactionResponse).to.not.be.undefined;
        expect(ledger.GetTransactionsRequest).to.not.be.undefined;
        expect(ledger.GetTransactionsResponse).to.not.be.undefined;
        expect(ledger.GetTransactionTreesResponse).to.not.be.undefined;
        expect(ledger.TransactionTree).to.not.be.undefined;
        expect(ledger.Identifier).to.not.be.undefined;
        expect(ledger.List).to.not.be.undefined;
        expect(ledger.Optional).to.not.be.undefined;
        expect(ledger.Record).to.not.be.undefined;
        expect(ledger.RecordField).to.not.be.undefined;
        expect(ledger.Value).to.not.be.undefined;
        expect(ledger.Variant).to.not.be.undefined;
        expect(ledger.Status).to.not.be.undefined;
        expect(ledger.lf).to.not.be.undefined;
        expect(ledger.lf.Archive).to.not.be.undefined;
        expect(ledger.lf.ArchivePayload).to.not.be.undefined;
        expect(ledger.lf.HashFunction).to.not.be.undefined;
    });

});
